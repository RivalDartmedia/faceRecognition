[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "DeepFace",
        "importPath": "deepface",
        "description": "deepface",
        "isExtraImport": true,
        "detail": "deepface",
        "documentation": {}
    },
    {
        "label": "DeepFace",
        "importPath": "deepface",
        "description": "deepface",
        "isExtraImport": true,
        "detail": "deepface",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ResultResponse",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class ResultResponse(BaseModel):\n        verified:bool = False\n        distance:float = VALID_DISTANCE\nclass VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse\nasync def log_request(request: Request, call_next):\n    # Cetak detail permintaan HTTP\n    print(f\"Time: {datetime.now()}\\t\")\n    print(f\"Received request: {request.method} {request.url}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VerifyResponse",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse\nasync def log_request(request: Request, call_next):\n    # Cetak detail permintaan HTTP\n    print(f\"Time: {datetime.now()}\\t\")\n    print(f\"Received request: {request.method} {request.url}\")\n    print(f\"Headers: {request.headers}\")\n    print(f\"Query Parameters: {request.query_params}\")\n    print(f\"Path Parameters: {request.path_params}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['TF_CPP_MIN_LOG_LEVEL']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n# penggunaan GPU\n# os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'\n# os.environ['CUDA_VISIBLE_DEVICES'] = '0'\napp = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nMODELS = [",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nMODELS = [\n    \"VGG-Face\", ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MODELS = [\n    \"VGG-Face\", \n    \"Facenet\", \n    \"Facenet512\", \n    \"OpenFace\", \n    \"DeepFace\", \n    \"DeepID\", \n    \"ArcFace\", \n    \"Dlib\", \n    \"SFace\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DETECTORS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DETECTORS = [\n    \"opencv\", \n    \"retinaface\", \n    \"mtcnn\", \n    \"ssd\", \n    \"dlib\", \n    \"mediapipe\",\n]\n# SET FACE-RECOG CONFIG HERE\nUSED_MODEL = MODELS[2]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "USED_MODEL",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "USED_MODEL = MODELS[2]\nUSED_DETECTOR = DETECTORS[2]\nVALID_DISTANCE = 0.37\napiKey = \"bGjJKURn3HPeafvE/BRv2MMfe3F6VRpf9qUbv4Q6Qf4=\"\nclass ResultResponse(BaseModel):\n        verified:bool = False\n        distance:float = VALID_DISTANCE\nclass VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "USED_DETECTOR",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "USED_DETECTOR = DETECTORS[2]\nVALID_DISTANCE = 0.37\napiKey = \"bGjJKURn3HPeafvE/BRv2MMfe3F6VRpf9qUbv4Q6Qf4=\"\nclass ResultResponse(BaseModel):\n        verified:bool = False\n        distance:float = VALID_DISTANCE\nclass VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse\nasync def log_request(request: Request, call_next):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VALID_DISTANCE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VALID_DISTANCE = 0.37\napiKey = \"bGjJKURn3HPeafvE/BRv2MMfe3F6VRpf9qUbv4Q6Qf4=\"\nclass ResultResponse(BaseModel):\n        verified:bool = False\n        distance:float = VALID_DISTANCE\nclass VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse\nasync def log_request(request: Request, call_next):\n    # Cetak detail permintaan HTTP",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "apiKey",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "apiKey = \"bGjJKURn3HPeafvE/BRv2MMfe3F6VRpf9qUbv4Q6Qf4=\"\nclass ResultResponse(BaseModel):\n        verified:bool = False\n        distance:float = VALID_DISTANCE\nclass VerifyResponse(BaseModel):\n    status: int = 200\n    result: ResultResponse\nasync def log_request(request: Request, call_next):\n    # Cetak detail permintaan HTTP\n    print(f\"Time: {datetime.now()}\\t\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "resize_image_dimension",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def resize_image_dimension(file_path):\n    \"\"\"\n        docstring\n    \"\"\"\n    image = Image.open(file_path)\n    width, height = image.size\n    if width <= 800 or height <= 800:\n        return file_path\n    width = round(width*800/height)\n    new_image = image.resize((width, 800))",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "file_to_image",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def file_to_image(file):\n    unique = str(uuid.uuid4())[:8]\n    extension = os.path.splitext(file.filename)[1]\n    file_path   = f\"tmp/{unique}{extension}\"\n    with open(file_path, \"wb\") as buffer:\n        shutil.copyfileobj(file.file, buffer)\n    return file_path\ndef check_brightness(image):\n    \"\"\"\n        auto brightness & auto sharpness",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "check_brightness",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def check_brightness(image):\n    \"\"\"\n        auto brightness & auto sharpness\n    \"\"\"\n    path_image = image\n    splitted_path = path_image.split(\"/\")\n    modified_image = cv2.imread(image)\n    # cv2.imwrite(str(splitted_path[0])+\"/before\"+str(splitted_path[1]),modified_image)\n    gray_image = cv2.cvtColor(modified_image, cv2.COLOR_BGR2GRAY)\n    average_brighness = np.mean(gray_image)",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "sharpen_image",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def sharpen_image(blur_image, level):\n    # blur_image = cv2.imread(blur_image)\n    # gray = cv2.cvtColor(blur_image, cv2.COLOR_BGR2GRAY)\n    if (level == 1):\n        kernel = np.array([\n        [0, -1, 0],\n        [-1, 5, -1],\n        [0, -1, 0]\n        ])\n        print(\"SHARPENED LV1\")",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "MIN_BRIGHTNESS_THRESHOLD",
        "kind": 5,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "MIN_BRIGHTNESS_THRESHOLD = 75\nMAX_BRIGHTNESS_THRESHOLD = 175\ndef resize_image_dimension(file_path):\n    \"\"\"\n        docstring\n    \"\"\"\n    image = Image.open(file_path)\n    width, height = image.size\n    if width <= 800 or height <= 800:\n        return file_path",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "MAX_BRIGHTNESS_THRESHOLD",
        "kind": 5,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "MAX_BRIGHTNESS_THRESHOLD = 175\ndef resize_image_dimension(file_path):\n    \"\"\"\n        docstring\n    \"\"\"\n    image = Image.open(file_path)\n    width, height = image.size\n    if width <= 800 or height <= 800:\n        return file_path\n    width = round(width*800/height)",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "temp_file_path",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "temp_file_path = f\"tmp/1.jpg\"\n# Process the uploaded file with DeepFace\nresult = DeepFace.verify(temp_file_path, temp_file_path)\nprint(result)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "result = DeepFace.verify(temp_file_path, temp_file_path)\nprint(result)",
        "detail": "test",
        "documentation": {}
    }
]